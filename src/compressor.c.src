;	section	.text
;	assume	adl = 1
;	section	.text
;	public	_zx7_Compress
_zx7_Compress:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix + -12
	ld	sp, hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 10
	push	hl
	ld	hl, 302
	push	hl
	ld	hl, 50
	push	hl
	ld	hl, 9
	push	hl
	call	_gfx_Rectangle
	ld	hl, 12
	add	hl, sp
	ld	sp, hl
	ld	hl, -65
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix + 6)
	ld	(_output_data), hl
	ld	iy, (ix + 9)
	ld	a, (iy)
	ld	de, (_output_index)
	ld	bc, 1
	add	hl, de
	inc	de
	ld	(_output_index), de
	ld	(hl), a
	push	bc
	ld	hl, (ix + 15)
	push	hl
	push	iy
	call	_get_optimal
	push	hl
	pop	bc
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	ld	de, -8388608
	ld	iy, (ix + 15)
	add	iy, de
	push	bc
	pop	hl
	add	hl, de
	ld	(ix + -3), iy
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	jq	nc, BB0_3
	ld	de, 10
BB0_2:
	ld	(ix + -6), bc
	push	bc
	pop	hl
	ld	bc, 300
	call	__imulu
	ld	bc, (ix + 15)
	call	__idivs
	ld	(ix + -12), hl
	push	hl
	pop	iy
	ld	bc, 10
	add	iy, bc
	ld	(ix + -9), iy
	ld	hl, 11
	or	a, a
	sbc	hl, de
	ld	bc, (ix + -12)
	add	hl, bc
	ld	bc, 8
	push	bc
	push	hl
	ld	hl, 51
	push	hl
	push	de
	call	_gfx_FillRectangle
	ld	hl, 12
	add	hl, sp
	ld	sp, hl
	ld	hl, (ix + -6)
	push	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_get_optimal
	ld	de, -8388608
	push	hl
	pop	bc
	ld	hl, 9
	add	hl, sp
	ld	sp, hl
	push	bc
	pop	hl
	add	hl, de
	ld	de, (ix + -3)
	or	a, a
	sbc	hl, de
	ld	de, (ix + -9)
	jq	c, BB0_2
BB0_3:
	ld	iy, 128
	ld	hl, (_bit_mask)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_5
	ld	(_bit_mask), iy
	ld	de, (_output_index)
	ld	(_bit_index), de
	ld	hl, (_output_data)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_5:
	lea	bc, iy + 0
	ld	iy, (_output_data)
	ld	de, (_bit_index)
	add	iy, de
	ld	a, (iy)
	or	a, l
	ld	(iy), a
	push	bc
	pop	iy
	ld	hl, (_bit_mask)
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_7
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_7:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_11
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_11:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_13
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_13:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_15
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_15:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_17
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_17:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_19
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_19:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_21
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_21:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_23
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_23:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_25
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_25:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_27
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_27:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_29
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_29:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_31
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_31:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_33
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_33:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_35
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_35:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_37
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_37:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_39
	ld	(_bit_mask), iy
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_39:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_9
	ld	(_bit_mask), iy
	ld	de, (_output_index)
	ld	(_bit_index), de
	ld	hl, (_output_data)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB0_9:
	ld	iy, (_output_data)
	ld	de, (_bit_index)
	add	iy, de
	ld	a, (iy)
	or	a, l
	ld	(iy), a
	ld	hl, (_bit_mask)
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	hl, (_output_index)
	ld	iy, (ix + 12)
	ld	(iy), hl
	ld	hl, (_output_index)
	ld	sp, ix
	pop	ix
	ret
;	section	.text

;	section	.text
;	public	_write_byte
_write_byte:
	ld	iy, 0
	add	iy, sp
	ld	hl, (iy + 6)
	ld	a, l
	ld	hl, (_output_data)
	ld	de, (_output_index)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), a
	ret
;	section	.text

;	section	.text
;	public	_get_optimal
_get_optimal:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix + -42
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	de, (ix + 12)
	ld	bc, 0
	add	hl, de
	ld	(ix + -12), hl
	ld	a, (hl)
	ld	(ix + -15), a
	ex	de, hl
	push	hl
	pop	iy
	ld	de, -2176
	add	iy, de
	ld	de, -8388608
	add	hl, de
	ld	de, -8386431
	or	a, a
	sbc	hl, de
	ld	(ix + -9), bc
	push	bc
	pop	hl
	jq	c, BB2_2
	lea	hl, iy + 0
BB2_2:
	ld	de, (ix + 12)
	push	de
	pop	iy
	ld	bc, -8388608
	push	bc
	pop	de
	add	iy, de
	add	hl, de
	push	hl
	pop	de
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB2_26
	ld	(ix + -24), de
	ld	hl, 1
	ld	(ix + -18), hl
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	or	a, a
	sbc	hl, de
	ld	bc, 65536
	push	de
	pop	iy
	add	iy, bc
	ld	de, -8388608
	add	hl, de
	ld	bc, -8323071
	or	a, a
	sbc	hl, bc
	lea	bc, iy + 0
	jq	nc, BB2_5
	ld	bc, (ix + 9)
BB2_5:
	ld	hl, (ix + 6)
	add	hl, bc
	ex	de, hl
	ld	hl, (ix + -12)
	or	a, a
	sbc	hl, de
	ld	(ix + -30), de
	ld	(ix + -36), de
	jq	c, BB2_7
	ld	hl, (ix + -12)
	ld	(ix + -36), hl
BB2_7:
	ld	hl, (ix + 12)
	push	hl
	pop	iy
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	(ix + -21), de
	ld	(ix + -6), de
BB2_8:
	dec	iy
	lea	bc, iy + 0
	ld	hl, (ix + 6)
	add	hl, bc
	ld	a, (hl)
	ld	l, (ix + -15)
	cp	a, l
	ld	(ix + -3), de
	jq	nz, BB2_12
	ld	(ix + -27), iy
	ld	iy, (ix + -12)
BB2_10:
	lea	hl, iy + 0
	ld	bc, (ix + -30)
	or	a, a
	sbc	hl, bc
	jq	nc, BB2_13
	lea	hl, iy + 0
	inc	hl
	ld	a, (iy + 1)
	ld	bc, (ix + -9)
	add	iy, bc
	ld	c, (iy)
	cp	a, c
	push	hl
	pop	iy
	jq	z, BB2_10
	jq	BB2_14
BB2_12:
	ld	de, -8388608
	push	de
	pop	bc
	jq	BB2_22
BB2_13:
	ld	hl, (ix + -36)
BB2_14:
	ld	bc, (ix + -12)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	ld	hl, (ix + 12)
	ld	iy, (ix + -27)
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	ld	(ix + -33), hl
	ld	hl, (ix + -21)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	jq	z, BB2_21
	ld	(ix + -39), de
	ex	de, hl
	add	hl, bc
	ld	bc, -8388605
	or	a, a
	sbc	hl, bc
	ld	hl, 1
	jq	c, BB2_18
	ld	iy, (ix + -39)
	dec	iy
	ld	hl, 1
BB2_17:
	ld	bc, 2
	add	hl, bc
	ex	de, hl
	lea	hl, iy + 0
	dec	c
	call	__ishru
	ld	(ix + -42), hl
	lea	hl, iy + 0
	ld	bc, 4
	or	a, a
	sbc	hl, bc
	ex	de, hl
	ld	iy, (ix + -42)
	jq	nc, BB2_17
BB2_18:
	push	hl
	pop	iy
	ld	hl, (ix + -33)
	ld	de, -8388608
	add	hl, de
	ld	bc, -8388479
	or	a, a
	sbc	hl, bc
	ld	bc, 13
	jq	nc, BB2_20
	ld	bc, 9
BB2_20:
	add	iy, bc
	ld	hl, (ix + -39)
	ld	bc, (ix + -21)
	call	__imulu
	ld	de, -8388608
	add	hl, de
	push	hl
	pop	bc
	ld	(ix + -42), iy
	add	iy, de
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	push	de
	pop	bc
	ld	de, (ix + -39)
	ld	iy, (ix + -27)
	jq	nc, BB2_22
BB2_21:
	ld	hl, (ix + -33)
	ld	(ix + -3), hl
	ld	(ix + -6), de
	ld	hl, (ix + -42)
	ld	(ix + -21), hl
BB2_22:
	ld	hl, (ix + -9)
	dec	hl
	ld	(ix + -9), hl
	lea	de, iy + 0
	add	iy, bc
	ld	hl, (ix + -24)
	lea	bc, iy + 0
	push	de
	pop	iy
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	c, BB2_8
	ld	iy, (ix + -6)
	lea	hl, iy + 0
	ld	bc, -8388608
	add	hl, bc
	ld	bc, -8388605
	or	a, a
	sbc	hl, bc
	jq	c, BB2_28
	dec	iy
	ld	a, 1
BB2_25:
	ld	de, 2
	ld	hl, (ix + -18)
	add	hl, de
	ld	(ix + -18), hl
	lea	hl, iy + 0
	ld	c, a
	call	__ishru
	push	hl
	pop	bc
	lea	hl, iy + 0
	ld	de, 4
	or	a, a
	sbc	hl, de
	push	bc
	pop	iy
	jq	nc, BB2_25
BB2_28:
	ld	hl, (ix + -3)
	ld	de, -8388608
	add	hl, de
	ld	de, -8388479
	or	a, a
	sbc	hl, de
	ld	iy, 9
	ld	hl, 13
	jq	nc, BB2_30
	lea	hl, iy + 0
BB2_30:
	ld	de, (ix + -18)
	ld	(ix + -15), de
	ld	de, (ix + -6)
	jq	BB2_31
BB2_26:
	ld	hl, 1
	ld	(ix + -15), hl
	ld	de, 0
	ld	(ix + -3), de
	ld	iy, 9
	lea	hl, iy + 0
BB2_31:
	ld	bc, (ix + -15)
	add	hl, bc
	ld	(ix + -6), hl
	push	de
	pop	hl
	lea	bc, iy + 0
	call	__imulu
	push	hl
	pop	iy
	ld	hl, (_bit_mask)
	ld	(ix + -9), hl
	ld	hl, -8388608
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + -6)
	add	hl, bc
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB2_36
	ld	(ix + -6), de
	ld	hl, (ix + -9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_34
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	de, (_output_index)
	ld	(_bit_index), de
	ld	hl, (_output_data)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB2_34:
	ld	iy, (_output_data)
	ld	bc, (_bit_index)
	add	iy, bc
	ld	a, (iy)
	or	a, l
	ld	(iy), a
	ld	hl, (_bit_mask)
	ld	c, 1
	call	__ishrs
	push	hl
	pop	de
	ld	(_bit_mask), de
	ld	iy, (ix + -6)
	ld	bc, -8388608
	add	iy, bc
	lea	hl, iy + 0
	ld	bc, -8388605
	or	a, a
	sbc	hl, bc
	jq	nc, BB2_39
	ld	hl, 2
	jq	BB2_44
BB2_36:
	ld	hl, (ix + -9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_38
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	de, (_output_index)
	ld	(_bit_index), de
	ld	hl, (_output_data)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), 0
	ld	hl, (_bit_mask)
BB2_38:
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	ld	hl, (ix + -12)
	ld	a, (hl)
	ld	hl, (_output_data)
	ld	de, (_output_index)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), a
	ld	hl, (ix + 12)
	inc	hl
	ld	sp, ix
	pop	ix
	ret
BB2_39:
	ld	(ix + -12), iy
	ld	a, 1
	ld	hl, 2
	ld	(ix + -9), hl
BB2_40:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_42
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	de, (_bit_mask)
BB2_42:
	ex	de, hl
	ld	c, a
	call	__ishrs
	push	hl
	pop	de
	ld	(_bit_mask), de
	ld	iy, (ix + -9)
	add	iy, iy
	ld	(ix + -9), iy
	ld	bc, -8388608
	add	iy, bc
	lea	hl, iy + 0
	ld	bc, (ix + -12)
	or	a, a
	sbc	hl, bc
	jq	c, BB2_40
	ld	bc, -8388606
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	ld	hl, (ix + -9)
	jq	c, BB2_50
BB2_44:
	ld	bc, (ix + -6)
	dec	bc
	ld	(ix + -15), bc
	ld	a, 1
BB2_45:
	ld	(ix + -9), hl
	ld	c, a
	call	__ishrs
	ld	(ix + -12), hl
	ld	bc, (ix + -15)
	call	__iand
	push	hl
	pop	iy
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_47
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
BB2_47:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_49
	ld	de, (_bit_mask)
	ld	hl, (_output_data)
	ld	bc, (_bit_index)
	add	hl, bc
	ld	c, a
	ld	a, (hl)
	or	a, e
	ld	(hl), a
	ld	a, c
BB2_49:
	ld	hl, (_bit_mask)
	ld	c, a
	call	__ishrs
	push	hl
	pop	de
	ld	(_bit_mask), de
	ld	bc, -8388608
	ld	hl, (ix + -9)
	add	hl, bc
	ld	bc, -8388604
	or	a, a
	sbc	hl, bc
	ld	hl, (ix + -12)
	jq	nc, BB2_45
BB2_50:
	ld	iy, (ix + -3)
	lea	hl, iy + 0
	ld	de, -8388608
	add	hl, de
	ld	de, -8388479
	or	a, a
	sbc	hl, de
	jq	nc, BB2_52
	ld	a, iyl
	dec	a
	ld	hl, (_output_data)
	ld	de, (_output_index)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), a
	jq	BB2_69
BB2_52:
	ld	de, -129
	add	iy, de
	ld	a, iyl
	or	a, -128
	ld	hl, (_output_data)
	ld	de, (_output_index)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), a
	ld	bc, 1024
	ld	(ix + -3), iy
	lea	hl, iy + 0
	call	__iand
	push	hl
	pop	iy
	ld	hl, (_bit_mask)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_54
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	de, (_output_index)
	ld	(_bit_index), de
	ld	hl, (_output_data)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), 0
BB2_54:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_56
	ld	de, (_bit_mask)
	ld	hl, (_output_data)
	ld	bc, (_bit_index)
	add	hl, bc
	ld	a, (hl)
	or	a, e
	ld	(hl), a
BB2_56:
	ld	hl, (_bit_mask)
	ld	c, 1
	call	__ishrs
	push	hl
	pop	de
	ld	(_bit_mask), de
	ld	bc, 512
	ld	hl, (ix + -3)
	call	__iand
	push	hl
	pop	iy
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_58
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
BB2_58:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_60
	ld	de, (_bit_mask)
	ld	hl, (_output_data)
	ld	bc, (_bit_index)
	add	hl, bc
	ld	a, (hl)
	or	a, e
	ld	(hl), a
BB2_60:
	ld	hl, (_bit_mask)
	ld	c, 1
	call	__ishrs
	push	hl
	pop	de
	ld	(_bit_mask), de
	ld	bc, 256
	ld	hl, (ix + -3)
	call	__iand
	push	hl
	pop	iy
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_62
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
BB2_62:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_64
	ld	de, (_bit_mask)
	ld	hl, (_output_data)
	ld	bc, (_bit_index)
	add	hl, bc
	ld	a, (hl)
	or	a, e
	ld	(hl), a
BB2_64:
	ld	hl, (_bit_mask)
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, (ix + -3)
	jq	nz, BB2_66
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	de, (_output_index)
	ld	(_bit_index), de
	ld	hl, (_output_data)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), 0
BB2_66:
	ld	a, iyl
	add	a, -128
	cp	a, -128
	jq	nc, BB2_68
	ld	de, (_bit_mask)
	ld	hl, (_output_data)
	ld	bc, (_bit_index)
	add	hl, bc
	ld	a, (hl)
	or	a, e
	ld	(hl), a
BB2_68:
	ld	hl, (_bit_mask)
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
BB2_69:
	ld	de, (ix + 12)
	ld	hl, (ix + -6)
	add	hl, de
	ld	sp, ix
	pop	ix
	ret
;	section	.text

;	section	.text
;	public	_write_bit
_write_bit:
	ld	iy, 0
	add	iy, sp
	ld	iy, (iy + 6)
	ld	hl, (_bit_mask)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_2
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	de, (_output_index)
	ld	(_bit_index), de
	ld	hl, (_output_data)
	push	de
	pop	bc
	inc	bc
	ld	(_output_index), bc
	add	hl, de
	ld	(hl), 0
BB3_2:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_4
	ld	de, (_bit_mask)
	ld	hl, (_output_data)
	ld	bc, (_bit_index)
	add	hl, bc
	ld	a, (hl)
	or	a, e
	ld	(hl), a
BB3_4:
	ld	hl, (_bit_mask)
	ld	c, 1
	call	__ishrs
	ld	(_bit_mask), hl
	ret
;	section	.text

;	section	.text
;	public	_get_match
_get_match:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix + -40
	ld	sp, hl
	ld	hl, (ix + 9)
	ld	iy, (ix + 15)
	lea	bc, iy + 0
	add	hl, bc
	ld	(ix + -6), hl
	ld	a, (hl)
	ld	(ix + -13), a
	ld	bc, -2176
	lea	hl, iy + 0
	add	hl, bc
	ex	de, hl
	ld	bc, -8388608
	add	iy, bc
	ld	bc, -8386431
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	ld	(ix + -3), hl
	jq	c, BB4_2
	ex	de, hl
BB4_2:
	ld	de, -8388608
	add	hl, de
	push	hl
	pop	de
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_24
	ld	(ix + -19), de
	ld	hl, (ix + 12)
	ld	iy, (ix + 15)
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	ld	bc, 65536
	add	iy, bc
	ld	de, -8388608
	add	hl, de
	ld	bc, -8323071
	or	a, a
	sbc	hl, bc
	lea	bc, iy + 0
	jq	nc, BB4_5
	ld	bc, (ix + 12)
BB4_5:
	ld	hl, (ix + 9)
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, bc
	ld	(ix + -25), bc
	ld	(ix + -34), bc
	jq	c, BB4_7
	ld	hl, (ix + -6)
	ld	(ix + -34), hl
BB4_7:
	ld	hl, (ix + 15)
	ex	de, hl
	or	a, a
	sbc	hl, hl
	ld	(ix + -16), hl
	ld	(ix + -12), hl
	ld	(ix + -9), hl
BB4_8:
	dec	de
	push	de
	pop	bc
	ld	hl, (ix + 9)
	add	hl, bc
	ld	a, (hl)
	ld	l, (ix + -13)
	cp	a, l
	jq	nz, BB4_23
	ld	(ix + -22), de
	ld	iy, (ix + -6)
BB4_10:
	lea	hl, iy + 0
	ld	bc, (ix + -25)
	or	a, a
	sbc	hl, bc
	jq	nc, BB4_22
	lea	hl, iy + 0
	inc	hl
	ld	a, (iy + 1)
	ld	bc, (ix + -3)
	add	iy, bc
	ld	c, (iy)
	cp	a, c
	push	hl
	pop	iy
	jq	z, BB4_10
	jq	BB4_12
BB4_23:
	ld	bc, -8388608
	jq	BB4_20
BB4_22:
	ld	hl, (ix + -34)
BB4_12:
	ld	bc, (ix + -6)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	hl, (ix + 15)
	ld	de, (ix + -22)
	push	de
	pop	bc
	or	a, a
	sbc	hl, bc
	ld	(ix + -28), hl
	ld	hl, (ix + -16)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, -8388608
	jq	z, BB4_19
	ld	(ix + -37), iy
	add	iy, bc
	lea	hl, iy + 0
	ld	bc, -8388605
	or	a, a
	sbc	hl, bc
	ld	hl, 1
	jq	c, BB4_16
	ld	iy, (ix + -37)
	dec	iy
	ld	hl, 1
BB4_15:
	ld	bc, 2
	add	hl, bc
	ld	(ix + -31), hl
	lea	hl, iy + 0
	dec	c
	call	__ishru
	push	hl
	pop	bc
	lea	hl, iy + 0
	ld	de, 4
	or	a, a
	sbc	hl, de
	ld	hl, (ix + -31)
	push	bc
	pop	iy
	jq	nc, BB4_15
BB4_16:
	push	hl
	pop	iy
	ld	hl, (ix + -28)
	ld	bc, -8388608
	add	hl, bc
	ld	de, -8388479
	or	a, a
	sbc	hl, de
	ld	bc, 13
	ld	hl, 9
	jq	nc, BB4_18
	push	hl
	pop	bc
BB4_18:
	add	iy, bc
	ld	de, (ix + -37)
	push	de
	pop	hl
	ld	bc, (ix + -16)
	call	__imulu
	push	hl
	pop	bc
	ld	bc, -8388608
	add	hl, bc
	ld	(ix + -40), hl
	ld	(ix + -31), iy
	lea	hl, iy + 0
	push	de
	pop	iy
	ld	de, -8388608
	add	hl, de
	ld	bc, (ix + -40)
	or	a, a
	sbc	hl, bc
	push	de
	pop	bc
	ld	de, (ix + -22)
	jq	nc, BB4_20
BB4_19:
	ld	hl, (ix + -28)
	ld	(ix + -9), hl
	ld	(ix + -12), iy
	ld	hl, (ix + -31)
	ld	(ix + -16), hl
BB4_20:
	ld	hl, (ix + -3)
	dec	hl
	ld	(ix + -3), hl
	push	de
	pop	iy
	add	iy, bc
	ld	hl, (ix + -19)
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	c, BB4_8
	jq	BB4_21
BB4_24:
	or	a, a
	sbc	hl, hl
	ld	(ix + -9), hl
	ld	(ix + -12), hl
BB4_21:
	ld	hl, (ix + 6)
	ld	de, (ix + -12)
	ld	(hl), de
	ld	hl, (ix + -9)
	ld	sp, ix
	pop	ix
	ret
;	section	.text

;	section	.text
;	public	_count_bits
_count_bits:
	push	ix
	ld	ix, 0
	add	ix, sp
	ld	de, (ix + 9)
	ld	iy, 1
	ld	bc, -8388608
	push	de
	pop	hl
	add	hl, bc
	ld	bc, -8388605
	or	a, a
	sbc	hl, bc
	jq	c, BB5_7
	dec	de
	ld	a, 1
BB5_2:
	ld	bc, 2
	add	iy, bc
	push	de
	pop	hl
	ld	c, a
	call	__ishru
	push	hl
	pop	bc
	ex	de, hl
	ld	de, 4
	or	a, a
	sbc	hl, de
	push	bc
	pop	de
	jq	nc, BB5_2
	jq	BB5_3
BB5_7:
BB5_3:
	ld	hl, (ix + 6)
	ld	de, -8388608
	add	hl, de
	ld	de, -8388479
	or	a, a
	sbc	hl, de
	jq	nc, BB5_4
	ld	de, 9
	add	iy, de
	lea	hl, iy + 0
	pop	ix
	ret
BB5_4:
	ld	de, 13
	add	iy, de
	lea	hl, iy + 0
	pop	ix
	ret
;	section	.text

;	section	.text
;	public	_write_elias_gamma
_write_elias_gamma:
	push	ix
	ld	ix, 0
	add	ix, sp
	lea	hl, ix + -6
	ld	sp, hl
	ld	hl, (ix + 6)
	ld	bc, 2
	ld	de, -8388608
	add	hl, de
	ld	de, -8388606
	ld	(ix + -6), hl
	or	a, a
	sbc	hl, de
	jq	nc, BB6_1
	jq	BB6_3
BB6_1:
	ld	(ix + -3), bc
	ld	de, (_bit_mask)
	ld	a, 1
BB6_4:
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_6
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
	ld	de, (_bit_mask)
BB6_6:
	ex	de, hl
	ld	c, a
	call	__ishrs
	push	hl
	pop	de
	ld	(_bit_mask), de
	ld	iy, (ix + -3)
	add	iy, iy
	ld	(ix + -3), iy
	ld	bc, -8388608
	add	iy, bc
	ld	hl, (ix + -6)
	lea	bc, iy + 0
	or	a, a
	sbc	hl, bc
	jq	nc, BB6_4
	lea	hl, iy + 0
	ld	de, -8388606
	or	a, a
	sbc	hl, de
	ld	bc, (ix + -3)
	jq	c, BB6_12
BB6_3:
	ld	de, (_bit_mask)
	ld	a, 1
BB6_7:
	ld	(ix + -3), bc
	push	bc
	pop	hl
	ld	c, a
	call	__ishrs
	ld	(ix + -6), hl
	ld	bc, (ix + 6)
	call	__iand
	push	hl
	pop	iy
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_9
	ld	hl, 128
	ld	(_bit_mask), hl
	ld	bc, (_output_index)
	ld	(_bit_index), bc
	ld	hl, (_output_data)
	push	bc
	pop	de
	inc	de
	ld	(_output_index), de
	add	hl, bc
	ld	(hl), 0
BB6_9:
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_11
	ld	de, (_bit_mask)
	ld	hl, (_output_data)
	ld	bc, (_bit_index)
	add	hl, bc
	ld	c, a
	ld	a, (hl)
	or	a, e
	ld	(hl), a
	ld	a, c
BB6_11:
	ld	hl, (_bit_mask)
	ld	c, a
	call	__ishrs
	push	hl
	pop	de
	ld	(_bit_mask), de
	ld	bc, -8388608
	ld	hl, (ix + -3)
	add	hl, bc
	ld	bc, -8388604
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + -6)
	jq	nc, BB6_7
BB6_12:
	ld	sp, ix
	pop	ix
	ret
;	section	.text

;	section	.text
;	public	_elias_gamma_bits
_elias_gamma_bits:
	ld	iy, 0
	add	iy, sp
	ld	de, (iy + 6)
	ld	iy, 1
	ld	bc, -8388608
	push	de
	pop	hl
	add	hl, bc
	ld	bc, -8388606
	or	a, a
	sbc	hl, bc
	jq	c, BB7_4
	ld	a, 1
BB7_2:
	ld	bc, 2
	add	iy, bc
	push	de
	pop	hl
	ld	c, a
	call	__ishru
	push	hl
	pop	bc
	ex	de, hl
	ld	de, 4
	or	a, a
	sbc	hl, de
	push	bc
	pop	de
	jq	nc, BB7_2
BB7_4:
	lea	hl, iy + 0
	ret
;	section	.text

;	section	.bss
;	public	_bit_mask
_bit_mask:
	rb	3

;	section	.bss
;	public	_bit_index
_bit_index:
	rb	3

;	section	.bss
;	public	_output_index
_output_index:
	rb	3

;	section	.bss
;	public	_output_data
_output_data:
	rb	3

__ishrs:=ti._ishrs
__ishru:=ti._ishru
__idivs:=ti._idivs
__iand:=ti._iand
__imulu:=ti._imulu
_gfx_SetDraw:=gfx_SetDraw
_gfx_SetColor:=gfx_SetColor
_gfx_Rectangle:=gfx_Rectangle
_gfx_FillRectangle:=gfx_FillRectangle
